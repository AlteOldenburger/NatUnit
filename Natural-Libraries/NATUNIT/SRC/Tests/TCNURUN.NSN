* >Natural Source Header 000000
* :Mode S
* :CP
* <Natural Source Header
/***********************************************************************

/*  File: TCNURUN

/*  NATUNIT's internal TestCase for running TestCases.

/*  Parameters:
/*    NUTESTP - TestCase parameters.

/*  Returns:
/*    NUTESTP - TestCase parameters.

/***********************************************************************
DEFINE DATA

PARAMETER USING NUTESTP

INDEPENDENT
01 +AIV-CALL-COUNTER (I4)
01 +AIV-ROUTINE-COUNTER (I4)
01 +AIV-ROUTINES (A32/1:*)

LOCAL USING NUCONST
LOCAL USING NUASSP

LOCAL USING NUPARSEP
LOCAL USING NUTCP

LOCAL

01 #NUMBER-OF-TESTS (I4)
01 #I (I4)
01 #TESTS-IN-SECOND-POSITION (A/1:*) DYNAMIC
01 #TESTCASE (A8)
01 #EXPECTED-MESSAGE (A) DYNAMIC

END-DEFINE

NUTESTP.FIXTURE := 'Run a TestCase'

INCLUDE NUTCTEMP

DEFINE SUBROUTINE TEST

/***********************************************************************
IF NUTESTP.TEST EQ 'should result in an error if no tests are provided'
/***********************************************************************
  RESET NUPARSEP
  REDUCE ARRAY NUPARSEP.TESTS TO 0
  PERFORM NU-RUN-TESTCASE NUPARSEP NUTCP

  #NUMBER-OF-TESTS := *OCC(NUTCP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 0 #NUMBER-OF-TESTS
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP C-NU-ERROR NUTCP.TC-RESULT
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'No tests were given' NUTCP.TC-MESSAGE
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'run all routines of the TestCase in the correct order'
/***********************************************************************
  #TESTCASE := 'NUTCTST3'
  PERFORM PARSE-TESTCASE
  PERFORM RESET-AIV
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 4 #NUMBER-OF-TESTS
  PERFORM NU-RUN-TESTCASE NUPARSEP NUTCP

  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 14 +AIV-ROUTINE-COUNTER
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 6 +AIV-CALL-COUNTER
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP-TESTCASE' +AIV-ROUTINES(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(2)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-CONTAINS NUASSP +AIV-ROUTINES(3) 'test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(4)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(5)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-CONTAINS NUASSP +AIV-ROUTINES(6) 'test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(7)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(8)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-CONTAINS NUASSP +AIV-ROUTINES(9) 'test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(10)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(11)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-CONTAINS NUASSP +AIV-ROUTINES(12) 'test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(13)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN-TESTCASE' +AIV-ROUTINES(14)
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'randomize the order of the tests'
/***********************************************************************
  FOR #I 1 100
    #TESTCASE := 'NUTCTST3'
    PERFORM PARSE-TESTCASE
    PERFORM RESET-AIV
    PERFORM NU-RUN-TESTCASE NUPARSEP NUTCP
    EXPAND ARRAY #TESTS-IN-SECOND-POSITION TO (1:#I)
    #TESTS-IN-SECOND-POSITION(#I) := +AIV-ROUTINES(6)
  END-FOR
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The first test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The second test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The third test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The fourth test'
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'run all routines of the TestCase in the correct order with RunTestsInOrder'
/***********************************************************************
  #TESTCASE := 'NUTCTST4'
  PERFORM PARSE-TESTCASE
  PERFORM RESET-AIV
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 4 #NUMBER-OF-TESTS
  PERFORM NU-RUN-TESTCASE NUPARSEP NUTCP

  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 14 +AIV-ROUTINE-COUNTER
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 6 +AIV-CALL-COUNTER
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP-TESTCASE' +AIV-ROUTINES(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(2)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'The first test' +AIV-ROUTINES(3)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(4)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(5)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'The second test' +AIV-ROUTINES(6)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(7)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(8)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'The third test' +AIV-ROUTINES(9)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(10)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'SETUP' +AIV-ROUTINES(11)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'The fourth test' +AIV-ROUTINES(12)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN' +AIV-ROUTINES(13)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TEARDOWN-TESTCASE' +AIV-ROUTINES(14)
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'execute tests in order if configured'
/***********************************************************************
  FOR #I 1 100
    #TESTCASE := 'NUTCTST4'
    PERFORM PARSE-TESTCASE
    PERFORM RESET-AIV
    PERFORM NU-RUN-TESTCASE NUPARSEP NUTCP
    EXPAND ARRAY #TESTS-IN-SECOND-POSITION TO (1:#I)
    #TESTS-IN-SECOND-POSITION(#I) := +AIV-ROUTINES(6)
  END-FOR

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-NOT-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The first test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The second test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-NOT-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The third test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-NOT-CONTAINS NUASSP #TESTS-IN-SECOND-POSITION(*) 'The fourth test'
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'identify a non-existent TestCase'
/***********************************************************************
  RESET NUPARSEP
  RESIZE ARRAY NUPARSEP.TESTS TO (1:1)
  NUPARSEP.TESTLIB(1) := *LIBRARY-ID
  NUPARSEP.TESTCASE(1) := 'ZZZZYYYY'
  PERFORM NU-RUN-TESTCASE NUPARSEP NUTCP

  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP C-NU-ERROR NUTCP.TC-RESULT
  COMPRESS 'TestCase not found: <' *LIBRARY-ID '.ZZZZYYYY>' INTO #EXPECTED-MESSAGE LEAVING NO
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP #EXPECTED-MESSAGE NUTCP.TC-MESSAGE
  
  #NUMBER-OF-TESTS := *OCC(NUTCP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 1 #NUMBER-OF-TESTS
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP C-NU-ERROR NUTCP.TEST-RESULT(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP #EXPECTED-MESSAGE NUTCP.TEST-MESSAGE(1)
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'identify a broken TestCase'
/***********************************************************************
  RESET NUPARSEP
  RESIZE ARRAY NUPARSEP.TESTS TO (1:1)
  NUPARSEP.TESTLIB(1) := *LIBRARY-ID
  NUPARSEP.TESTCASE(1) := 'NUTCTST1'
  PERFORM NU-RUN-TESTCASE NUPARSEP NUTCP

  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP C-NU-ERROR NUTCP.TC-RESULT
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-CONTAINS NUASSP NUTCP.TC-MESSAGE 'Error 935'
  
  #NUMBER-OF-TESTS := *OCC(NUTCP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 1 #NUMBER-OF-TESTS
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP C-NU-ERROR NUTCP.TEST-RESULT(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-CONTAINS NUASSP NUTCP.TEST-MESSAGE(1) 'Error 935'
END-IF

END-SUBROUTINE

/***********************************************************************
DEFINE SUBROUTINE RESET-AIV
/***********************************************************************
RESET +AIV-CALL-COUNTER +AIV-ROUTINE-COUNTER
REDUCE ARRAY +AIV-ROUTINES TO 0
END-SUBROUTINE
/***********************************************************************

/***********************************************************************
DEFINE SUBROUTINE PARSE-TESTCASE
/***********************************************************************
RESET NUPARSEP NUTCP
NUPARSEP.LIBNAME := *LIBRARY-ID
NUPARSEP.TESTCASENAME := #TESTCASE
PERFORM NU-PARSE NUPARSEP
#NUMBER-OF-TESTS := *OCC(NUPARSEP.TEST)
END-SUBROUTINE
/***********************************************************************

END
