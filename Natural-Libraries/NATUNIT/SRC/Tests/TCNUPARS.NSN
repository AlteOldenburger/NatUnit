* >Natural Source Header 000000
* :Mode S
* :CP
* <Natural Source Header
/***********************************************************************

/*  File: TCNUPARS

/*  NATUNIT's internal TestCase for parsing TestCases.

/*  Parameters:
/*    NUTESTP - TestCase parameters.

/*  Returns:
/*    NUTESTP - TestCase parameters.

/***********************************************************************
DEFINE DATA

PARAMETER USING NUTESTP

LOCAL USING NUCONST
LOCAL USING NUASSP
LOCAL USING NUPARSEP

LOCAL
01 #NUM-TESTS (I4)
01 #I (I4)
01 #INDEX-TESTCASE (I4)

01 #TESTNAME (A) DYNAMIC
01 #TESTDATAPARAM (A) DYNAMIC
01 #TEST-FOUND (L)
01 #EXPECTED-MESSAGE (A) DYNAMIC

END-DEFINE

NUTESTP.FIXTURE := 'Parse TestCase'

INCLUDE NUTCTEMP

DEFINE SUBROUTINE TEST

/***********************************************************************
IF NUTESTP.TEST EQ 'parse a simple TestCase'
/***********************************************************************
  RESET INITIAL NUPARSEP
  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 0 #NUM-TESTS

  NUPARSEP.LIBNAME := *LIBRARY-ID
  NUPARSEP.TESTCASENAME := 'NUTCTST2'
  PERFORM NU-PARSE NUPARSEP

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.MESSAGE
  ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.VALID

  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 3 #NUM-TESTS

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.LIBNAME NUPARSEP.TESTLIB(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.TESTCASENAME NUPARSEP.TESTCASE(1)

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The first test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The second test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The third test'

  FOR #I 1 3
    ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.TEST-DATA-PARAM(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.HAS-SETUP-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.HAS-TEARDOWN-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-SETUP(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-TEARDOWN(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.RUN-IN-ORDER(#I)
  END-FOR
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'parse a TestCase with SETUP/TEARDOWN'
/***********************************************************************
  RESET INITIAL NUPARSEP
  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 0 #NUM-TESTS

  NUPARSEP.LIBNAME := *LIBRARY-ID
  NUPARSEP.TESTCASENAME := 'NUTCTST3'
  PERFORM NU-PARSE NUPARSEP

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.MESSAGE
  ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.VALID

  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 4 #NUM-TESTS

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.LIBNAME NUPARSEP.TESTLIB(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.TESTCASENAME NUPARSEP.TESTCASE(1)

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The first test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The second test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The third test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The fourth test'

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.TEST-DATA-PARAM(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.TEST-DATA-PARAM(2)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.TEST-DATA-PARAM(3)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.TEST-DATA-PARAM(4)

  FOR #I 1 4
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-SETUP-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-TEARDOWN-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-SETUP(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-TEARDOWN(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.RUN-IN-ORDER(#I)
  END-FOR
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'parse a TestCase with tests in otder'
/***********************************************************************
  NUPARSEP.LIBNAME := *LIBRARY-ID
  NUPARSEP.TESTCASENAME := 'NUTCTST4'
  PERFORM NU-PARSE NUPARSEP

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The first test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The second test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The third test'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'The fourth test'

  FOR #I 1 4
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-SETUP-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-TEARDOWN-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-SETUP(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.HAS-TEARDOWN(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.RUN-IN-ORDER(#I)
  END-FOR
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'parse a parameterized TestCase'
/***********************************************************************
  RESET INITIAL NUPARSEP
  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 0 #NUM-TESTS

  NUPARSEP.LIBNAME := *LIBRARY-ID
  NUPARSEP.TESTCASENAME := 'TCPARAM'
  PERFORM NU-PARSE NUPARSEP

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EMPTY NUASSP NUPARSEP.MESSAGE
  ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.VALID

  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 10 #NUM-TESTS

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.TESTCASENAME NUPARSEP.TESTCASE(1)
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.LIBNAME NUPARSEP.TESTLIB(1)

  #TESTNAME := 'test with inline parameters'; #TESTDATAPARAM := '1;2;3'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS
  #TESTNAME := 'test with inline parameters'; #TESTDATAPARAM := '4;5;9'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS
  #TESTNAME := 'test with inline parameters'; #TESTDATAPARAM := '7;8;15'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS

  #TESTNAME := 'test with dynamically generated parameters'; #TESTDATAPARAM := '7;8;9;24'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS
  #TESTNAME := 'test with dynamically generated parameters'; #TESTDATAPARAM := '10;11;12;33'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS

  #TESTNAME := 'test without parameters'; #TESTDATAPARAM := ' '; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS

  #TESTNAME := 'test with parameters from file'; #TESTDATAPARAM := 'A;B;A B'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS
  #TESTNAME := 'test with parameters from file'; #TESTDATAPARAM := 'Test;1;Test 1'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS
  #TESTNAME := 'test with parameters from file'; #TESTDATAPARAM := 'Another;one;Another one'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS
  #TESTNAME := 'test with parameters from file'; #TESTDATAPARAM := 'And;the last one;And the last one'; PERFORM ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS

  FOR #I 1 *OCC(NUPARSEP.HAS-SETUP)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.HAS-SETUP-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.HAS-TEARDOWN-TESTCASE(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.HAS-SETUP(#I)
    ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.HAS-TEARDOWN(#I)
  END-FOR
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'parse a TestSuite'
/***********************************************************************
  RESET INITIAL NUPARSEP
  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 0 #NUM-TESTS

  NUPARSEP.LIBNAME := *LIBRARY-ID
  NUPARSEP.TESTCASENAME := 'TSSUITE1'
  PERFORM NU-PARSE NUPARSEP

  ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP NUPARSEP.VALID
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP ' ' NUPARSEP.MESSAGE

  #NUM-TESTS := *OCCURRENCE(NUPARSEP.TEST)
  ASSERT-LINE := *LINE; PERFORM ASSERT-NUM-EQUALS NUASSP 170 #NUM-TESTS

  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.LIBNAME NUPARSEP.TESTLIB(1)

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TESTCASE(*) 'TCNUASS'

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'strings equal'
  EXAMINE NUPARSEP.TEST(*) FOR  'strings equal' GIVING INDEX #INDEX-TESTCASE
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TCNUASS' NUPARSEP.TESTCASE(#INDEX-TESTCASE)

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'strings are identical'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'numbers equal'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'alphanumeric arrays equal or same'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'numeric arrays equal or same'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'floats equal'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'strings empty or not'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'number zero or not'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'string contains another string'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'compare numbers'

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TESTCASE(*) 'TCNUSEQ'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'SETUP, TEST, and TEARDOWN are called in this order'

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TESTCASE(*) 'TCNUSRC'
  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) 'get source for TCNUSRC'

  ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TESTCASE(*) 'TCPARAM'
  EXAMINE NUPARSEP.TESTCASE(*) FOR 'TCPARAM' GIVING INDEX #INDEX-TESTCASE
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TCPARAM' NUPARSEP.TESTCASE(#INDEX-TESTCASE)

  ADD 3 TO #INDEX-TESTCASE
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP 'TCPARAM' NUPARSEP.TESTCASE(#INDEX-TESTCASE)
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'parse an invalid TestCase'
/***********************************************************************
  RESET NUPARSEP
  NUPARSEP.LIBNAME := *LIBRARY-ID
  NUPARSEP.TESTCASENAME := 'NUPARSE'
  PERFORM NU-PARSE NUPARSEP

  ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.VALID
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-CONTAINS NUASSP NUPARSEP.MESSAGE 'does not use NatUnit parameters'
END-IF

/***********************************************************************
IF NUTESTP.TEST EQ 'parse a non-existent TestCase'
/***********************************************************************
  RESET NUPARSEP
  NUPARSEP.LIBNAME := *LIBRARY-ID
  NUPARSEP.TESTCASENAME := 'ZZZZYYYY'
  PERFORM NU-PARSE NUPARSEP

  ASSERT-LINE := *LINE; PERFORM ASSERT-FALSE NUASSP NUPARSEP.VALID
  COMPRESS 'TestCase not found: <' *LIBRARY-ID '.ZZZZYYYY>' INTO #EXPECTED-MESSAGE LEAVING NO
  ASSERT-LINE := *LINE; PERFORM ASSERT-STRING-EQUALS NUASSP NUPARSEP.MESSAGE #EXPECTED-MESSAGE
END-IF

END-SUBROUTINE

/***********************************************************************
DEFINE SUBROUTINE ASSERT-TEST-WITH-TESTDATAPARAM-EXISTS
/***********************************************************************

ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST(*) #TESTNAME
ASSERT-LINE := *LINE; PERFORM ASSERT-ARRAY-A-CONTAINS NUASSP NUPARSEP.TEST-DATA-PARAM(*) #TESTDATAPARAM

#TEST-FOUND := FALSE
FOR #I 1 *OCC(NUPARSEP.TEST)
  IF NUPARSEP.TEST(#I) EQ #TESTNAME
      AND NUPARSEP.TEST-DATA-PARAM(#I) EQ #TESTDATAPARAM
    #TEST-FOUND := TRUE
  END-IF
END-FOR

COMPRESS 'parameterized test <' #TESTNAME '> with parameters <' #TESTDATAPARAM '> not found'
  INTO NUASSP.MESSAGE
ASSERT-LINE := *LINE; PERFORM ASSERT-TRUE NUASSP #TEST-FOUND

END-SUBROUTINE
/******************************************************************

END
